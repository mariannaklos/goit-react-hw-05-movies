{"version":3,"file":"static/js/514.f58e42c5.chunk.js","mappings":"uPAIaA,EAAa,WACxB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAKA,OAHAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAUN,GAASO,MAAK,gBAAGJ,EAAH,EAAGA,KAAH,OAAcC,EAAQD,EAAtB,GACzB,GAAE,CAACH,KAEF,0BACE,wBACGG,EAAKK,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,aAChC,OACE,2BACE,wBAAKF,KACL,uBAAID,KACJ,gBACEI,IAAG,8CAAyCD,GAC5CE,IAAI,SACJC,MAAM,YANDJ,EAUZ,OAIR,EAEDZ,EAAWiB,UAAY,CACrBb,KAAMc,IAAAA,OAAAA,YAGR,W,8LClCMC,EAAW,6BACXC,EAAM,mCAAZ,SAEeC,EAAc,GAAdA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA6BC,GAA7B,gGAEuBC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,yFAAsGG,EAAtG,gCAFvB,cAEUE,EAFV,yBAGWA,EAAKC,MAHhB,gCAMIC,QAAQC,MAAR,MANJ,yFAUeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BhB,GAA5B,gGAEuBW,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,oBAAiCP,EAAjC,4BAAuDQ,IAF9E,cAEUI,EAFV,yBAGWA,EAAKC,MAHhB,gCAKIC,QAAQC,MAAR,MALJ,yFASepB,EAAU,GAAVA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBK,GAAzB,gGAEuBW,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,oBAAiCP,EAAjC,4BAAuDQ,IAF9E,cAEUI,EAFV,yBAGWA,EAAKC,MAHhB,gCAKIC,QAAQC,MAAR,MALJ,yFASeE,EAAU,GAAVA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBC,GAAzB,gGAEuBP,EAAAA,EAAAA,IAAA,UACdJ,EADc,0CAC4BC,IAHnD,cAEUI,EAFV,yBAKWA,EAAKC,MALhB,gCAOIC,QAAQC,MAAR,MAPJ,yFAWeI,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BnB,GAA/B,gGAEuBW,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,oBAAiCP,EAAjC,oBAA+CQ,IAFtE,cAEUI,EAFV,yBAGWA,GAHX,gCAKIE,QAAQC,MAAR,MALJ,gF","sources":["components/movies/cast/MoviesCast.jsx","components/serverApi.jsx"],"sourcesContent":["import { fetchCast } from 'components/serverApi';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nexport const MoviesCast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchCast(movieId).then(({ cast }) => setCast(cast));\n  }, [movieId]);\n  return (\n    <div>\n      <ul>\n        {cast.map(({ character, name, id, profile_path }) => {\n          return (\n            <li key={id}>\n              <h2>{name}</h2>\n              <p>{character}</p>\n              <img\n                src={`https://image.tmdb.org/t/p/original/${profile_path}`}\n                alt=\"avatar\"\n                width=\"200px\"\n              />\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nMoviesCast.prototype = {\n  cast: PropTypes.object.isRequired,\n};\n\nexport default MoviesCast;","import axios from 'axios';\n\nconst URL_BASA = 'https://api.themoviedb.org';\nconst key = 'e74f8e13c620ae3b84b14599ba3d0b44';\n\nasync function searchMovieId(qury) {\n  try {\n    const resp = await axios.get(`${URL_BASA}/3/search/movie?api_key=e74f8e13c620ae3b84b14599ba3d0b44&language=en-US&query=${qury}&page=1&include_adult=false`);\n    return resp.data;\n   \n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function fetchReviews(id) {\n  try {\n    const resp = await axios.get(`${URL_BASA}/3/movie/${id}/reviews?api_key=${key}`);\n    return resp.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function fetchCast(id) {\n  try {\n    const resp = await axios.get(`${URL_BASA}/3/movie/${id}/credits?api_key=${key}`);\n    return resp.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function fetchData(q) {\n  try {\n    const resp = await axios.get(\n      `${URL_BASA}/3/trending/movie/week?api_key=${key}`\n    );\n    return resp.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function fetchDetalsFilm(id) {\n  try {\n    const resp = await axios.get(`${URL_BASA}/3/movie/${id}?api_key=${key}`);\n    return resp;\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport { fetchData, fetchDetalsFilm, fetchReviews, fetchCast, searchMovieId };"],"names":["MoviesCast","movieId","useParams","useState","cast","setCast","useEffect","fetchCast","then","map","character","name","id","profile_path","src","alt","width","prototype","PropTypes","URL_BASA","key","searchMovieId","qury","axios","resp","data","console","error","fetchReviews","fetchData","q","fetchDetalsFilm"],"sourceRoot":""}